[{"title":"[AWS] - Deploy Spring Boot application to AWS EC2 via Docker.","date":"2024-08-16T00:00:00.000Z","tags":["AWS","Spring Boot","Docker"],"lastmod":"2024-08-16T00:00:00.000Z","draft":false,"summary":"In real-world projects, our applications won't only run on local machines. We need to deploy them to servers and configure them to be accessible from the Internet by clients. In this post, we'll explore how to deploy a Spring Boot application to a cloud server using AWS EC2.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"7 min read","minutes":6.335,"time":380100,"words":1267},"slug":"deploy-spring-application-to-aws-ec2-via-docker","path":"blog/deploy-spring-application-to-aws-ec2-via-docker","filePath":"blog/2024-08-16-deploy-spring-application-to-aws-ec2-via-docker.mdx","toc":[{"value":"1. What are we going to do?","url":"#1-what-are-we-going-to-do","depth":1},{"value":"2. Create a Spring Boot project","url":"#2-create-a-spring-boot-project","depth":1},{"value":"2.1 - Packaging application as a .jar file using Maven.","url":"#21---packaging-application-as-a-jar-file-using-maven","depth":3},{"value":"2.2 - Packaging application as Docker image and push to DockerHub.","url":"#22---packaging-application-as-docker-image-and-push-to-dockerhub","depth":3},{"value":"3. Deploy Spring Boot application to AWS EC2","url":"#3-deploy-spring-boot-application-to-aws-ec2","depth":1},{"value":"3.1 - configure and create an AWS EC2 instance.","url":"#31---configure-and-create-an-aws-ec2-instance","depth":3},{"value":"3.2 - Deploy and run as a service using .jar file.","url":"#32---deploy-and-run-as-a-service-using-jar-file","depth":3},{"value":"3.2 - Deploy and run as a Docker container.","url":"#32---deploy-and-run-as-a-docker-container","depth":3},{"value":"4. Summary.","url":"#4-summary","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[AWS] - Deploy Spring Boot application to AWS EC2 via Docker.","datePublished":"2024-08-16T00:00:00.000Z","dateModified":"2024-08-16T00:00:00.000Z","description":"In real-world projects, our applications won't only run on local machines. We need to deploy them to servers and configure them to be accessible from the Internet by clients. In this post, we'll explore how to deploy a Spring Boot application to a cloud server using AWS EC2.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/deploy-spring-application-to-aws-ec2-via-docker"}},{"title":"[CI/CD] - CI pipelines with GitHub actions","date":"2024-08-10T00:00:00.000Z","tags":["Docker","Spring Boot","CI/CD"],"lastmod":"2024-08-10T00:00:00.000Z","draft":false,"summary":"Software development is a process; you can't perfect it immediately, but you can continuously improve it. Therefore, you need CI/CD to streamline the workflow and enhance overall efficiency. In this article, we will explore how to use GitHub Actions to create pipelines for developing a Spring Boot application and using Docker for dockerizing.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"9 min read","minutes":8.07,"time":484200,"words":1614},"slug":"ci-cd-with-github-actions-spring-boot-application","path":"blog/ci-cd-with-github-actions-spring-boot-application","filePath":"blog/2024-08-10-ci-cd-with-github-actions-spring-boot-application.mdx","toc":[{"value":"1. What are we going to do?","url":"#1-what-are-we-going-to-do","depth":1},{"value":"2. Create a Spring Boot project","url":"#2-create-a-spring-boot-project","depth":1},{"value":"3. Write the files to define the pipelines.","url":"#3-write-the-files-to-define-the-pipelines","depth":1},{"value":"4. Test the pipelines.","url":"#4-test-the-pipelines","depth":1},{"value":"5. Add Docker steps.","url":"#5-add-docker-steps","depth":1},{"value":"5.1 - Dockerfile","url":"#51---dockerfile","depth":3},{"value":"5.2 - Docker steps for the pipelines","url":"#52---docker-steps-for-the-pipelines","depth":3},{"value":"6. Running application as Docker container.","url":"#6-running-application-as-docker-container","depth":1},{"value":"7. Summary.","url":"#7-summary","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[CI/CD] - CI pipelines with GitHub actions","datePublished":"2024-08-10T00:00:00.000Z","dateModified":"2024-08-10T00:00:00.000Z","description":"Software development is a process; you can't perfect it immediately, but you can continuously improve it. Therefore, you need CI/CD to streamline the workflow and enhance overall efficiency. In this article, we will explore how to use GitHub Actions to create pipelines for developing a Spring Boot application and using Docker for dockerizing.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/ci-cd-with-github-actions-spring-boot-application"}},{"title":"[Docker] - Dockerize React application with Nginx as web server.","date":"2024-07-27T00:00:00.000Z","tags":["Docker","React","Nginx"],"lastmod":"2024-07-27T00:00:00.000Z","draft":false,"summary":"In the previous post, we explored the process of containerizing a backend service using Spring Boot. In this post, we will delve into how to containerize a frontend application built with React, using Nginx as the web server.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"5 min read","minutes":4.59,"time":275400,"words":918},"slug":"how-to-dockerize-reactjs-app-with-nginx-as-reverse-proxy","path":"blog/how-to-dockerize-reactjs-app-with-nginx-as-reverse-proxy","filePath":"blog/2024-07-27-how-to-dockerize-reactjs-app-with-nginx-as-reverse-proxy.mdx","toc":[{"value":"1. Create a ReactJS application?","url":"#1-create-a-reactjs-application","depth":1},{"value":"2. Dockerfile","url":"#2-dockerfile","depth":1},{"value":"3. Nginx configuration file.","url":"#3-nginx-configuration-file","depth":1},{"value":"4. Build an image from Dockerfile.","url":"#4-build-an-image-from-dockerfile","depth":1},{"value":"5. Run application as Docker container.","url":"#5-run-application-as-docker-container","depth":1},{"value":"6. Summary","url":"#6-summary","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Docker] - Dockerize React application with Nginx as web server.","datePublished":"2024-07-27T00:00:00.000Z","dateModified":"2024-07-27T00:00:00.000Z","description":"In the previous post, we explored the process of containerizing a backend service using Spring Boot. In this post, we will delve into how to containerize a frontend application built with React, using Nginx as the web server.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/how-to-dockerize-reactjs-app-with-nginx-as-reverse-proxy"}},{"title":"[Docker] - Dockerize a Spring Boot application.","date":"2024-07-26T00:00:00.000Z","tags":["Docker","Docker Compose","Spring Boot","PostgreSQL"],"lastmod":"2024-07-26T00:00:00.000Z","draft":false,"summary":"In this post, we will learn how to dockerize a standard Spring Boot application using Docker and Docker Compose. Specifically, we will focus on a backend system that provides APIs using Spring Boot and connects to a PostgreSQL database.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"9 min read","minutes":8.445,"time":506700,"words":1689},"slug":"how-to-dockerize-spring-boot-using-docker-and-docker-compose","path":"blog/how-to-dockerize-spring-boot-using-docker-and-docker-compose","filePath":"blog/2024-07-26-how-to-dockerize-spring-boot-using-docker-and-docker-compose.mdx","toc":[{"value":"1. What are we going to do?","url":"#1-what-are-we-going-to-do","depth":1},{"value":"2. Setup and add some business logic","url":"#2-setup-and-add-some-business-logic","depth":1},{"value":"2.1 - Setup and run our Spring Boot application.","url":"#21---setup-and-run-our-spring-boot-application","depth":2},{"value":"Step 1: Setting up","url":"#step-1-setting-up","depth":3},{"value":"Step 2: Running our application","url":"#step-2-running-our-application","depth":3},{"value":"2.2 - Adding some business logic.","url":"#22---adding-some-business-logic","depth":2},{"value":"Entities:","url":"#entities","depth":3},{"value":"Repositories:","url":"#repositories","depth":3},{"value":"Services:","url":"#services","depth":3},{"value":"Controllers:","url":"#controllers","depth":3},{"value":"2.3 - Setup database on local machine using Docker.","url":"#23---setup-database-on-local-machine-using-docker","depth":2},{"value":"2.4 - Packaging application to Jar file.","url":"#24---packaging-application-to-jar-file","depth":2},{"value":"3. Build image using Dockerfile.","url":"#3-build-image-using-dockerfile","depth":1},{"value":"4. Run the application using Docker compose.","url":"#4-run-the-application-using-docker-compose","depth":1},{"value":"5. Summary","url":"#5-summary","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Docker] - Dockerize a Spring Boot application.","datePublished":"2024-07-26T00:00:00.000Z","dateModified":"2024-07-26T00:00:00.000Z","description":"In this post, we will learn how to dockerize a standard Spring Boot application using Docker and Docker Compose. Specifically, we will focus on a backend system that provides APIs using Spring Boot and connects to a PostgreSQL database.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/how-to-dockerize-spring-boot-using-docker-and-docker-compose"}},{"title":"Tích hợp thanh toán PayPal trong ứng dụng Spring Boot","date":"2024-07-21T00:00:00.000Z","tags":["Spring Boot","ReactJS"],"lastmod":"2024-07-21T00:00:00.000Z","draft":false,"summary":"Thanh toán online ngày nay đã trở nên vô cùng phổ biến và PayPal là một cái tên không còn xa lại gì trong lĩnh vực này. Vì vậy trong bài viết hôm nay mình sẽ cùng các bạn tìm hiểu cách tích hợp thanh toán PayPal trong ứng dụng Spring Boot.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"9 min read","minutes":8.82,"time":529200,"words":1764},"slug":"paypal-integration-spring-boo-reactjs","path":"blog/paypal-integration-spring-boo-reactjs","filePath":"blog/2024-07-21-paypal-integration-spring-boo-reactjs.mdx","toc":[{"value":"1. PayPal là gì?","url":"#1-paypal-là-gì","depth":1},{"value":"1.1 - PayPal là gì?","url":"#11---paypal-là-gì","depth":3},{"value":"1.2 - Setup tài khoản test (sandbox)","url":"#12---setup-tài-khoản-test-sandbox","depth":3},{"value":"2. Tổng quan ứng dụng.","url":"#2-tổng-quan-ứng-dụng","depth":1},{"value":"2.1 - Flow","url":"#21---flow","depth":3},{"value":"2.2 - Demo","url":"#22---demo","depth":3},{"value":"3. Backend (Spring Boot)","url":"#3-backend-spring-boot","depth":1},{"value":"3.1. - Setup và cấu hình","url":"#31---setup-và-cấu-hình","depth":3},{"value":"3.2 - Triển khai logic các phương thức create() và execute().","url":"#32---triển-khai-logic-các-phương-thức-create-và-execute","depth":3},{"value":"3.3 - Tạo Controller để public các APIs cho frontend.","url":"#33---tạo-controller-để-public-các-apis-cho-frontend","depth":3},{"value":"4. Frontend (ReactJS)","url":"#4-frontend-reactjs","depth":1},{"value":"4.1 - PaymentPage.","url":"#41---paymentpage","depth":3},{"value":"4.2 - SuccessPage.","url":"#42---successpage","depth":3},{"value":"4.2 - CancelPage.","url":"#42---cancelpage","depth":3},{"value":"6. Lời kết","url":"#6-lời-kết","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Tích hợp thanh toán PayPal trong ứng dụng Spring Boot","datePublished":"2024-07-21T00:00:00.000Z","dateModified":"2024-07-21T00:00:00.000Z","description":"Thanh toán online ngày nay đã trở nên vô cùng phổ biến và PayPal là một cái tên không còn xa lại gì trong lĩnh vực này. Vì vậy trong bài viết hôm nay mình sẽ cùng các bạn tìm hiểu cách tích hợp thanh toán PayPal trong ứng dụng Spring Boot.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/paypal-integration-spring-boo-reactjs"}},{"title":"[Hibernate] - Bài toán N+1 queries trong JPA và Hibernate.","date":"2024-06-18T00:00:00.000Z","tags":["Hibernate","JPA"],"lastmod":"2024-06-18T00:00:00.000Z","draft":false,"summary":"Trong bài viết này mình sẽ cùng các bạn bàn về bài toán N+1 queries và tìm hiểu xem data access framework như Hibernate xử lý bài toán này như thế nào, bản chât chất của những cách xử lý đó là gì?.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"14 min read","minutes":13.98,"time":838800,"words":2796},"slug":"n-plus-1-queries-problems","path":"blog/n-plus-1-queries-problems","filePath":"blog/2024-05-06-n-plus-1-queries-problems.mdx","toc":[{"value":"1. Sự ngây ngô và điểm D môn lập trình web?","url":"#1-sự-ngây-ngô-và-điểm-d-môn-lập-trình-web","depth":1},{"value":"2. Framework xử lý bài toán N+1 queries như thế nào?","url":"#2-framework-xử-lý-bài-toán-n1-queries-như-thế-nào","depth":1},{"value":"2.1 - FetchType.EAGER","url":"#21---fetchtypeeager","depth":2},{"value":"2.2 - FetchType.LAZY","url":"#22---fetchtypelazy","depth":2},{"value":"2.3 - Giải pháp","url":"#23---giải-pháp","depth":2},{"value":"JOIN FETCH","url":"#join-fetch","depth":3},{"value":"Secondary Queries","url":"#secondary-queries","depth":3},{"value":"@BatchSize","url":"#batchsize","depth":3},{"value":"3. Điểm D có đáng không?","url":"#3-điểm-d-có-đáng-không","depth":1},{"value":"JOIN","url":"#join","depth":3},{"value":"IN","url":"#in","depth":3},{"value":"4. Lời kết","url":"#4-lời-kết","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Hibernate] - Bài toán N+1 queries trong JPA và Hibernate.","datePublished":"2024-06-18T00:00:00.000Z","dateModified":"2024-06-18T00:00:00.000Z","description":"Trong bài viết này mình sẽ cùng các bạn bàn về bài toán N+1 queries và tìm hiểu xem data access framework như Hibernate xử lý bài toán này như thế nào, bản chât chất của những cách xử lý đó là gì?.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/n-plus-1-queries-problems"}},{"title":"[Spring Boot] - Bảo mật ứng dụng Spring với Spring Security và JWT","date":"2024-04-08T00:00:00.000Z","tags":["Spring Boot","Spring Security","JWT"],"lastmod":"2024-04-08T00:00:00.000Z","draft":false,"summary":"Trong thời đại kỹ thuật số hiện nay, việc xác thực (authentication) và phân quyền (authorization) là những khía cạnh cơ bản và tất yếu của bất kỳ hệ thống nào. Với các hệ thống được xây dựng trên nền tảng của Spring Framework chúng ta có thể sử dụng Spring Security kết hợp với JWT để có một giải pháp linh hoạt, an toàn cho việc triển khai các cơ chế phân quyền và xác thực.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"26 min read","minutes":25.155,"time":1509300,"words":5031},"slug":"securing-spring-boot-applications-with-jwt","path":"blog/securing-spring-boot-applications-with-jwt","filePath":"blog/2024-04-02-securing-spring-boot-applications-with-jwt.mdx","toc":[{"value":"1. JSON Web Token (JWT)","url":"#1-json-web-token-jwt","depth":2},{"value":"1.1 - JWT là gì?","url":"#11---jwt-là-gì","depth":3},{"value":"1.2 - Cấu trúc của JWT","url":"#12---cấu-trúc-của-jwt","depth":3},{"value":"1.3 - JWT hoạt động như thế nào?","url":"#13---jwt-hoạt-động-như-thế-nào","depth":3},{"value":"2. Cài đặt và cấu hình ứng dụng Spring Boot.","url":"#2-cài-đặt-và-cấu-hình-ứng-dụng-spring-boot","depth":2},{"value":"3. Thêm các dependencies cho JWT và Spring Security.","url":"#3-thêm-các-dependencies-cho-jwt-và-spring-security","depth":2},{"value":"4. Cấu hình Spring Security và JWT","url":"#4-cấu-hình-spring-security-và-jwt","depth":2},{"value":"4.1 - UserDetails","url":"#41---userdetails","depth":3},{"value":"4.2 - UserDetailsService","url":"#42---userdetailsservice","depth":3},{"value":"4.3 - JwtUtils","url":"#43---jwtutils","depth":3},{"value":"4.4 - AuthenticationEntryPoint","url":"#44---authenticationentrypoint","depth":3},{"value":"4.5 - OncePerRequestFilter","url":"#45---onceperrequestfilter","depth":3},{"value":"4.6 - WebSecurityConfig","url":"#46---websecurityconfig","depth":3},{"value":"5. Đăng ký (SignUp)","url":"#5-đăng-ký-signup","depth":2},{"value":"5.1 - Flow","url":"#51---flow","depth":3},{"value":"5.2 - Setting up.","url":"#52---setting-up","depth":3},{"value":"5.3 - Testing","url":"#53---testing","depth":3},{"value":"6. Đăng nhập (SignIn)","url":"#6-đăng-nhập-signin","depth":2},{"value":"6.1 - Flow","url":"#61---flow","depth":3},{"value":"6.2 - Setting up","url":"#62---setting-up","depth":3},{"value":"6.3 - Testing","url":"#63---testing","depth":3},{"value":"7. Truy cập tài nguyên thông qua JWT","url":"#7-truy-cập-tài-nguyên-thông-qua-jwt","depth":2},{"value":"7.1 - Setting up","url":"#71---setting-up","depth":3},{"value":"7.2 - Testing","url":"#72---testing","depth":3},{"value":"8. Tổng kết","url":"#8-tổng-kết","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Spring Boot] - Bảo mật ứng dụng Spring với Spring Security và JWT","datePublished":"2024-04-08T00:00:00.000Z","dateModified":"2024-04-08T00:00:00.000Z","description":"Trong thời đại kỹ thuật số hiện nay, việc xác thực (authentication) và phân quyền (authorization) là những khía cạnh cơ bản và tất yếu của bất kỳ hệ thống nào. Với các hệ thống được xây dựng trên nền tảng của Spring Framework chúng ta có thể sử dụng Spring Security kết hợp với JWT để có một giải pháp linh hoạt, an toàn cho việc triển khai các cơ chế phân quyền và xác thực.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/securing-spring-boot-applications-with-jwt"}},{"title":"[Apache Kafka][02] - Kafka Quickstart","date":"2024-03-05T00:00:00.000Z","tags":["apache kafka"],"lastmod":"2024-03-05T00:00:00.000Z","draft":false,"summary":"Ở bài viết trước mình đã cùng các bạn tìm hiểu những khái niệm cơ bản trong Kafka, vì vậy bài viết tiếp theo này mình sẽ cùng các bạn thực hành một chút với Kafa. Chúng ta sẽ cài đặt Kafka, tạo topics, gửi event tới topic, đọc event đó, xử lý dữ liệu.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"8 min read","minutes":7.46,"time":447600,"words":1492},"slug":"apache-kafka-quickstart","path":"blog/apache-kafka-quickstart","filePath":"blog/2024-03-04-apache-kafka-quickstart.mdx","toc":[{"value":"1. Cài đặt Kafka","url":"#1-cài-đặt-kafka","depth":2},{"value":"2. Thiết lập môi trường Kafka","url":"#2-thiết-lập-môi-trường-kafka","depth":2},{"value":"2.1 - Thiết lập Kafka thông qua ZooKeeper.","url":"#21---thiết-lập-kafka-thông-qua-zookeeper","depth":3},{"value":"2.2 - Thiết lập Kafka thông qua KRaft.","url":"#22---thiết-lập-kafka-thông-qua-kraft","depth":3},{"value":"2.2.1 - Sử dụng các file đã download.","url":"#221---sử-dụng-các-file-đã-download","depth":4},{"value":"2.2.2 - Sử dụng Docker image.","url":"#222---sử-dụng-docker-image","depth":4},{"value":"3. Tạo Kafka Topics.","url":"#3-tạo-kafka-topics","depth":2},{"value":"4. Ghi events","url":"#4-ghi-events","depth":2},{"value":"5. Đọc events","url":"#5-đọc-events","depth":2},{"value":"6. Import/Export dữ liệu thông qua Kafka Connect.","url":"#6-importexport-dữ-liệu-thông-qua-kafka-connect","depth":2},{"value":"6.1. Cấu hình","url":"#61-cấu-hình","depth":3},{"value":"6.2. Đọc/Ghi dữ liệu qua Kafka Connect.","url":"#62-đọcghi-dữ-liệu-qua-kafka-connect","depth":3},{"value":"7. Tham khảo","url":"#7-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Apache Kafka][02] - Kafka Quickstart","datePublished":"2024-03-05T00:00:00.000Z","dateModified":"2024-03-05T00:00:00.000Z","description":"Ở bài viết trước mình đã cùng các bạn tìm hiểu những khái niệm cơ bản trong Kafka, vì vậy bài viết tiếp theo này mình sẽ cùng các bạn thực hành một chút với Kafa. Chúng ta sẽ cài đặt Kafka, tạo topics, gửi event tới topic, đọc event đó, xử lý dữ liệu.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/apache-kafka-quickstart"}},{"title":"[Apache Kafka][01] - Giới thiệu chung về Apache Kafka","date":"2024-03-01T00:00:00.000Z","tags":["apache kafka"],"lastmod":"2024-03-01T00:00:00.000Z","draft":false,"summary":"Trong bài viết đầu tiên này mình sẽ cùng các bạn tìm hiểu về sự ra đời của Kafka, những thành phần chính của Kafka ở mức cơ bản cũng như giới thiệu một số usecase cụ thể khi sử dụng Kafka","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"7 min read","minutes":7,"time":420000,"words":1400},"slug":"apache-kafka-introduction","path":"blog/apache-kafka-introduction","filePath":"blog/2024-03-01-apache-kafka-introduction.mdx","toc":[{"value":"1. Kafka là gì?","url":"#1-kafka-là-gì","depth":2},{"value":"2. Kafka có phải mà một Message Queue không?","url":"#2-kafka-có-phải-mà-một-message-queue-không","depth":2},{"value":"3. Tại sao lại là Kafka?","url":"#3-tại-sao-lại-là-kafka","depth":2},{"value":"3.1. Bài toán dẫn đến sự ra đời của Kafka.","url":"#31-bài-toán-dẫn-đến-sự-ra-đời-của-kafka","depth":3},{"value":"3.2. Kafka giải bài toán như thế nào?","url":"#32-kafka-giải-bài-toán-như-thế-nào","depth":3},{"value":"4. Các khái niệm cơ bản trong Kafka.","url":"#4-các-khái-niệm-cơ-bản-trong-kafka","depth":2},{"value":"5. Một vài usecase cho việc sử dụng Kafka.","url":"#5-một-vài-usecase-cho-việc-sử-dụng-kafka","depth":2},{"value":"6. Tham khảo","url":"#6-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Apache Kafka][01] - Giới thiệu chung về Apache Kafka","datePublished":"2024-03-01T00:00:00.000Z","dateModified":"2024-03-01T00:00:00.000Z","description":"Trong bài viết đầu tiên này mình sẽ cùng các bạn tìm hiểu về sự ra đời của Kafka, những thành phần chính của Kafka ở mức cơ bản cũng như giới thiệu một số usecase cụ thể khi sử dụng Kafka","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/apache-kafka-introduction"}},{"title":"[Design Pattern] - Singleton","date":"2024-02-20T00:00:00.000Z","tags":["Design Pattern"],"lastmod":"2024-02-20T00:00:00.000Z","draft":false,"summary":"Tiếp tục seri Design Patterns hôm nay mình sẽ cùng các bạn tìm hiểu về một Creational Design Pattern nữa cũng rất thú vị đó là Singleton Pattern.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"10 min read","minutes":9.79,"time":587400,"words":1958},"slug":"design-pattern-singleton","path":"blog/design-pattern-singleton","filePath":"blog/2024-02-05-design-pattern-singleton.mdx","toc":[{"value":"1. Singleton là gì?","url":"#1-singleton-là-gì","depth":2},{"value":"2. Singleton giải quyết bài toán gì?","url":"#2-singleton-giải-quyết-bài-toán-gì","depth":2},{"value":"2.1 - Controlled access to resource","url":"#21---controlled-access-to-resource","depth":3},{"value":"2.2 - Global access point","url":"#22---global-access-point","depth":3},{"value":"3. Các bước triển khai Singleton","url":"#3-các-bước-triển-khai-singleton","depth":2},{"value":"4. Những cách triển khai Singleton Pattern?","url":"#4-những-cách-triển-khai-singleton-pattern","depth":2},{"value":"4.1 - Eager initialization","url":"#41---eager-initialization","depth":3},{"value":"4.2 - Static block initialization","url":"#42---static-block-initialization","depth":3},{"value":"4.3 - Lazy initialization","url":"#43---lazy-initialization","depth":3},{"value":"4.4 - Thread Safe Singleton","url":"#44---thread-safe-singleton","depth":3},{"value":"4.5 - Bill Pugh Singleton","url":"#45---bill-pugh-singleton","depth":3},{"value":"4.6 - Enum Singleton","url":"#46---enum-singleton","depth":3},{"value":"5. Usecase","url":"#5-usecase","depth":2},{"value":"6. Kết luận","url":"#6-kết-luận","depth":2},{"value":"7. Tham khảo","url":"#7-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Design Pattern] - Singleton","datePublished":"2024-02-20T00:00:00.000Z","dateModified":"2024-02-20T00:00:00.000Z","description":"Tiếp tục seri Design Patterns hôm nay mình sẽ cùng các bạn tìm hiểu về một Creational Design Pattern nữa cũng rất thú vị đó là Singleton Pattern.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/design-pattern-singleton"}},{"title":"[Design Pattern] - Builder","date":"2024-02-10T00:00:00.000Z","tags":["Design Pattern"],"lastmod":"2024-02-10T00:00:00.000Z","draft":false,"summary":"Tiếp tục seri Design Patterns hôm nay mình sẽ cùng các bạn tìm hiểu về một Creational Design Pattern nữa cũng rất thú vị đó là Builder Pattern.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"13 min read","minutes":12.87,"time":772200,"words":2574},"slug":"design-pattern-builder","path":"blog/design-pattern-builder","filePath":"blog/2024-02-05-design-pattern-builder.mdx","toc":[{"value":"1. Đặt vấn đề","url":"#1-đặt-vấn-đề","depth":2},{"value":"2. Phân tích","url":"#2-phân-tích","depth":2},{"value":"3. Builder Pattern","url":"#3-builder-pattern","depth":2},{"value":"4. Cài đặt Builder Pattern","url":"#4-cài-đặt-builder-pattern","depth":2},{"value":"5. Mở rộng","url":"#5-mở-rộng","depth":2},{"value":"6. Nhược điểm của Builder Pattern","url":"#6-nhược-điểm-của-builder-pattern","depth":2},{"value":"7. Tham khảo","url":"#7-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Design Pattern] - Builder","datePublished":"2024-02-10T00:00:00.000Z","dateModified":"2024-02-10T00:00:00.000Z","description":"Tiếp tục seri Design Patterns hôm nay mình sẽ cùng các bạn tìm hiểu về một Creational Design Pattern nữa cũng rất thú vị đó là Builder Pattern.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/design-pattern-builder"}},{"title":"[Design Pattern] - Factory Method","date":"2024-02-08T00:00:00.000Z","tags":["Design Pattern"],"lastmod":"2024-03-08T00:00:00.000Z","draft":false,"summary":"Factory Method là một design pattern trong nhóm Creational Pattern. Pattern này cung cấp các interface cho việc tạo ra các objects trong supperclass, nhưng cho phép các subclasses thay đổi kiểu object sẽ được tạo ra.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"11 min read","minutes":10.74,"time":644400,"words":2148},"slug":"design-pattern-factory-method","path":"blog/design-pattern-factory-method","filePath":"blog/2024-07-05-design-pattern-factory-method.mdx","toc":[{"value":"1. Đặt vấn đề","url":"#1-đặt-vấn-đề","depth":2},{"value":"2. Phân tích","url":"#2-phân-tích","depth":2},{"value":"3. Giới thiệu Factory Method","url":"#3-giới-thiệu-factory-method","depth":2},{"value":"4. Factory Method gồm những gì?","url":"#4-factory-method-gồm-những-gì","depth":2},{"value":"5. Refactoring","url":"#5-refactoring","depth":2},{"value":"5.1 - Định nghĩa các buttons","url":"#51---định-nghĩa-các-buttons","depth":3},{"value":"5.2 - Định nghĩa các factory","url":"#52---định-nghĩa-các-factory","depth":3},{"value":"6. Mở rộng","url":"#6-mở-rộng","depth":2},{"value":"7. Tổng kết","url":"#7-tổng-kết","depth":2},{"value":"8. Tham khảo","url":"#8-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Design Pattern] - Factory Method","datePublished":"2024-02-08T00:00:00.000Z","dateModified":"2024-03-08T00:00:00.000Z","description":"Factory Method là một design pattern trong nhóm Creational Pattern. Pattern này cung cấp các interface cho việc tạo ra các objects trong supperclass, nhưng cho phép các subclasses thay đổi kiểu object sẽ được tạo ra.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/design-pattern-factory-method"}},{"title":"[OOP] - Các nguyên lý thiết kế hướng đối tượng - SOLID","date":"2024-02-05T00:00:00.000Z","tags":["SOLID","OOP"],"lastmod":"2024-02-05T00:00:00.000Z","draft":false,"summary":"Đối với các hệ thống được thiết kế theo mô hình hướng đối tượng, chúng ta có 5 nguyên tắc hàng đầu với mục tiêu tạo ra những thay đổi code ít ảnh hưởng tới các phần còn lại. Nói cách khác, đây là những nguyên tắc thiết kế với mục tiêu đáp ứng và thích nghi với sự thay đổi của hệ thống - rất phù hợp và thục tế cho các hệ thống hiện nay.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"13 min read","minutes":12.165,"time":729900,"words":2433},"slug":"object-oriented-design-principle-solid","path":"blog/object-oriented-design-principle-solid","filePath":"blog/2024-02-05-object-oriented-design-principle-solid.mdx","toc":[{"value":"1. Single Responsibility Principle (SRP)","url":"#1-single-responsibility-principle-srp","depth":2},{"value":"2. Open-Closed principle (OCP)","url":"#2-open-closed-principle-ocp","depth":2},{"value":"3. Liskov substitution principle (LSP)","url":"#3-liskov-substitution-principle-lsp","depth":2},{"value":"Example","url":"#example","depth":3},{"value":"Refactoring","url":"#refactoring","depth":3},{"value":"4. Interface segregation principle (ISP)","url":"#4-interface-segregation-principle-isp","depth":2},{"value":"5. Dependency Inversion Principle (DIP)","url":"#5-dependency-inversion-principle-dip","depth":2},{"value":"6. Tham khảo.","url":"#6-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[OOP] - Các nguyên lý thiết kế hướng đối tượng - SOLID","datePublished":"2024-02-05T00:00:00.000Z","dateModified":"2024-02-05T00:00:00.000Z","description":"Đối với các hệ thống được thiết kế theo mô hình hướng đối tượng, chúng ta có 5 nguyên tắc hàng đầu với mục tiêu tạo ra những thay đổi code ít ảnh hưởng tới các phần còn lại. Nói cách khác, đây là những nguyên tắc thiết kế với mục tiêu đáp ứng và thích nghi với sự thay đổi của hệ thống - rất phù hợp và thục tế cho các hệ thống hiện nay.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/object-oriented-design-principle-solid"}},{"title":"[Golang] - How to say \"Hello\" with Golang?","date":"2024-01-12T00:00:00.000Z","tags":["Golang"],"lastmod":"2024-01-12T00:00:00.000Z","draft":false,"summary":"In this post, we will learn how to write the first program with Golang - a programming language developed by Google and had quickly become popular among developers for building scalable and high-performance applications.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"6 min read","minutes":5.535,"time":332100,"words":1107},"slug":"hello-world-with-golang","path":"blog/hello-world-with-golang","filePath":"blog/2024-01-12-hello-world-with-golang.mdx","toc":[{"value":"1. Golang là gì?","url":"#1-golang-là-gì","depth":1},{"value":"1.1 - Điều gì khiến Go nổi bật (key features).","url":"#11---điều-gì-khiến-go-nổi-bật-key-features","depth":2},{"value":"1.2 - Go dùng làm gì?","url":"#12---go-dùng-làm-gì","depth":2},{"value":"2. Cài đặt và viết chương trình đầu tiên","url":"#2-cài-đặt-và-viết-chương-trình-đầu-tiên","depth":1},{"value":"2.1 - Cài đặt Go.","url":"#21---cài-đặt-go","depth":2},{"value":"2.2 - How to say \"Hello World\" using Go?","url":"#22---how-to-say-hello-world-using-go","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"[Golang] - How to say \"Hello\" with Golang?","datePublished":"2024-01-12T00:00:00.000Z","dateModified":"2024-01-12T00:00:00.000Z","description":"In this post, we will learn how to write the first program with Golang - a programming language developed by Google and had quickly become popular among developers for building scalable and high-performance applications.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/hello-world-with-golang"}},{"title":"How to create a secure code and protect data security.","date":"2023-03-21T00:00:00.000Z","tags":["security","cookie","token","authentication"],"lastmod":"2023-03-21T00:00:00.000Z","draft":false,"summary":"Việc bảo đảm sự toàn vẹn dữ liệu khi hai hay nhiều hệ thống giao tiếp với nhau là rất quan trọng. Có rất nhiều cách thức để đảm bảo sự toàn vẹn dữ liệu đó và trong bài viết hôm nay mình sẽ cùng các bạn tìm hiểu về một trong những phương pháp đó - secure code.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"12 min read","minutes":11.67,"time":700200,"words":2334},"slug":"how-to-create-secure-code-and-protect-data-security","path":"blog/how-to-create-secure-code-and-protect-data-security","filePath":"blog/2023-03-21-how-to-create-secure-code-and-protect-data-security.mdx","toc":[{"value":"1. Secure Code là gì và để làm gì?","url":"#1-secure-code-là-gì-và-để-làm-gì","depth":2},{"value":"1.1 - Là gì?","url":"#11---là-gì","depth":3},{"value":"1.2 - Để làm gì?","url":"#12---để-làm-gì","depth":3},{"value":"2. Ví dụ","url":"#2-ví-dụ","depth":2},{"value":"2.1 - Bài toán","url":"#21---bài-toán","depth":3},{"value":"2.2 - Coding","url":"#22---coding","depth":3},{"value":"3. Lời kết","url":"#3-lời-kết","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"How to create a secure code and protect data security.","datePublished":"2023-03-21T00:00:00.000Z","dateModified":"2023-03-21T00:00:00.000Z","description":"Việc bảo đảm sự toàn vẹn dữ liệu khi hai hay nhiều hệ thống giao tiếp với nhau là rất quan trọng. Có rất nhiều cách thức để đảm bảo sự toàn vẹn dữ liệu đó và trong bài viết hôm nay mình sẽ cùng các bạn tìm hiểu về một trong những phương pháp đó - secure code.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/how-to-create-secure-code-and-protect-data-security"}},{"title":"Cookie-Based và Token-Based Authentication","date":"2023-01-28T00:00:00.000Z","tags":["security","cookie","token","authentication"],"lastmod":"2023-01-28T00:00:00.000Z","draft":false,"summary":"Cookie-based authentication và Token-based authentication là hai khái niệm mà nhiều người vẫn hay nhầm lẫn, trong bài viết này mình sẽ cùng các bạn tìm hiểu về hai khái niệm cơ bản những cũng rất quan trọng trong việc bảo mật thông tin này.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"9 min read","minutes":8.53,"time":511800,"words":1706},"slug":"cookie-based-and-token-based-authentiction","path":"blog/cookie-based-and-token-based-authentiction","filePath":"blog/2023-01-28-cookie-based-and-token-based-authentiction.mdx","toc":[{"value":"1. Ngược dòng lịch sử","url":"#1-ngược-dòng-lịch-sử","depth":2},{"value":"2. Cookie-Based Authentication","url":"#2-cookie-based-authentication","depth":2},{"value":"3. Token-Based Authentication","url":"#3-token-based-authentication","depth":2},{"value":"4. Token-Based Authentication có ưu điểm gì?","url":"#4-token-based-authentication-có-ưu-điểm-gì","depth":2},{"value":"4.1 - Stateless, Scalable và Decoupled","url":"#41---stateless-scalable-và-decoupled","depth":3},{"value":"4.2 - Cross Domain và CORS (Cross-Origin Resource Sharing)","url":"#42---cross-domain-và-cors-cross-origin-resource-sharing","depth":3},{"value":"4.3 - JWTs cho phép lưu trữ nhiều dữ liệu","url":"#43---jwts-cho-phép-lưu-trữ-nhiều-dữ-liệu","depth":3},{"value":"4.4 - Hiệu năng","url":"#44---hiệu-năng","depth":3},{"value":"5. Tham khảo","url":"#5-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Cookie-Based và Token-Based Authentication","datePublished":"2023-01-28T00:00:00.000Z","dateModified":"2023-01-28T00:00:00.000Z","description":"Cookie-based authentication và Token-based authentication là hai khái niệm mà nhiều người vẫn hay nhầm lẫn, trong bài viết này mình sẽ cùng các bạn tìm hiểu về hai khái niệm cơ bản những cũng rất quan trọng trong việc bảo mật thông tin này.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/cookie-based-and-token-based-authentiction"}},{"title":"Authentication vs Authorization","date":"2023-01-25T00:00:00.000Z","tags":["security","authentication","authorization"],"lastmod":"2023-01-25T00:00:00.000Z","draft":false,"summary":"Trong bảo mật, hai khái niệm mà nhiều người thường nhầm lẫn đó là xác thực và ủy quyền. Trong bài viết hôm nay, mình sẽ cùng các bạn tìm hiểu những điều cơ bản của hai khái niệm này và giải thích cách chúng được định nghĩa.","images":["/static/img/prompts/structured-blocks-cover.png"],"layout":"PostLayout","type":"Blog","readingTime":{"text":"3 min read","minutes":2.785,"time":167100,"words":557},"slug":"authentication-and-authorization","path":"blog/authentication-and-authorization","filePath":"blog/2023-01-25-authentication-and-authorization.mdx","toc":[{"value":"1. Bộ đôi này là gì?","url":"#1-bộ-đôi-này-là-gì","depth":2},{"value":"2. So sánh một chút!","url":"#2-so-sánh-một-chút","depth":2},{"value":"3. Bộ đôi này có vai trò gì?","url":"#3-bộ-đôi-này-có-vai-trò-gì","depth":2},{"value":"4. Tham khảo","url":"#4-tham-khảo","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Authentication vs Authorization","datePublished":"2023-01-25T00:00:00.000Z","dateModified":"2023-01-25T00:00:00.000Z","description":"Trong bảo mật, hai khái niệm mà nhiều người thường nhầm lẫn đó là xác thực và ủy quyền. Trong bài viết hôm nay, mình sẽ cùng các bạn tìm hiểu những điều cơ bản của hai khái niệm này và giải thích cách chúng được định nghĩa.","image":"/static/img/prompts/structured-blocks-cover.png","url":"https://www.davidnguyen.blog/authentication-and-authorization"}}]