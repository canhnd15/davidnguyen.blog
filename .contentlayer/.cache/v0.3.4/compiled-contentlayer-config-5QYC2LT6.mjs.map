{
  "version": 3,
  "sources": ["../../../data/siteMetadata.js", "../../../contentlayer.config.ts"],
  "sourcesContent": ["/** @type {import(\"pliny/config\").PlinyConfig } */\nconst siteMetadata = {\n  title: \"David's Blog\",\n  author: 'David Nguyen',\n  headerTitle: 'David Nguyen',\n  description: 'A minimalism software engineer',\n  language: 'en-us',\n  siteUrl: 'https://www.davidnguyen.blog',\n  siteRepo: 'https://github.com/canhnd15/davidblog',\n  image: '/static/img/avatar.png',\n  socialBanner: '/static/img/twitter-card.png',\n  email: 'canhnd15@gmail.com',\n  youtube: 'https://www.youtube.com/c/laptrinhb2a',\n  github: 'https://github.com/canhnd15',\n  twitter: '',\n  linkedin: '',\n  locale: 'en-US',\n  analytics: {\n    googleAnalytics: {\n      googleAnalyticsId: 'UA-100201704-1', // e.g. G-XXXXXXX\n    },\n  },\n  newsletter: {\n    // Please add your .env file and modify it according to your selection\n    provider: 'emailoctopus',\n  },\n  comment: {\n    provider: '', // supported providers: giscus, utterances, disqus\n    giscusConfig: {\n      repo: '', // username/repoName\n      // Visit the link below, enter your repo in the configuration section and copy the script data parameters\n      // Before that you should create a new Github discussions category with the Announcements type so that new discussions can only be created by maintainers and giscus\n      // https://giscus.app/\n      repositoryId: '',\n      category: '',\n      categoryId: '',\n      mapping: '', // supported options: pathname, url, title\n      reactions: '', // Emoji reactions: 1 = enable / 0 = disable\n      // Send discussion metadata periodically to the parent window: 1 = enable / 0 = disable\n      metadata: '',\n      // theme example: light, dark, dark_dimmed, dark_high_contrast\n      // transparent_dark, preferred_color_scheme, custom\n      theme: '',\n      // theme when dark mode\n      darkTheme: '',\n      // If the theme option above is set to 'custom`\n      // please provide a link below to your custom theme css file.\n      // example: https://giscus.app/themes/custom_example.css\n      themeURL: '',\n    },\n    utterancesConfig: {\n      repo: '', // username/repoName\n      issueTerm: '', // supported options: pathname, url, title\n      label: '', // label (optional): Comment \uD83D\uDCAC\n      // theme example: github-light, github-dark, preferred-color-scheme\n      // github-dark-orange, icy-dark, dark-blue, photon-dark, boxy-light\n      theme: '',\n      // theme when dark mode\n      darkTheme: '',\n    },\n    disqus: {\n      // https://help.disqus.com/en/articles/1717111-what-s-a-shortname\n      shortname: '',\n    },\n  },\n  search: {\n    provider: 'kbar', // kbar or algolia\n    kbarConfig: {\n      searchDocumentsPath: 'search.json', // path to load documents to search\n    },\n  },\n}\n\nmodule.exports = siteMetadata\n", "import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer/source-files'\nimport { writeFileSync } from 'fs'\nimport readingTime from 'reading-time'\nimport GithubSlugger from 'github-slugger'\nimport path from 'path'\n// Remark packages\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\nimport remarkFootnotes from 'remark-footnotes'\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from 'pliny/mdx-plugins/index.js'\n// Rehype packages\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeKatex from 'rehype-katex'\nimport rehypeCitation from 'rehype-citation'\nimport rehypePrismPlus from 'rehype-prism-plus'\nimport rehypePresetMinify from 'rehype-preset-minify'\nimport siteMetadata from './data/siteMetadata'\nimport { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js'\n\nconst root = process.cwd()\n\n/**\n * Remove yyyy-mm-dd and extension in file path to generate slug\n */\nfunction formatSlug(slug) {\n  const regex = /(\\d{4})-(\\d{2})-(\\d{2})-/g\n  return slug.replace(regex, '')\n}\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => formatSlug(doc._raw.flattenedPath.replace(/^.+?(\\/)/, '')),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => formatSlug(doc._raw.flattenedPath),\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n}\n\n/**\n * Count the occurrences of all tags across blog posts and write to json file\n */\nfunction createTagCount(allBlogs) {\n  const tagCount: Record<string, number> = {}\n  allBlogs.forEach((file) => {\n    if (file.tags && file.draft !== true) {\n      file.tags.forEach((tag) => {\n        const formattedTag = GithubSlugger.slug(tag)\n        if (formattedTag in tagCount) {\n          tagCount[formattedTag] += 1\n        } else {\n          tagCount[formattedTag] = 1\n        }\n      })\n    }\n  })\n  writeFileSync('./app/tag-data.json', JSON.stringify(tagCount))\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (\n    siteMetadata?.search?.provider === 'kbar' &&\n    siteMetadata.search.kbarConfig.searchDocumentsPath\n  ) {\n    writeFileSync(\n      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,\n      JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n    )\n    console.log('Local search index generated...')\n  }\n}\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: 'blog/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    lastmod: { type: 'date' },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n    images: { type: 'json' },\n    authors: { type: 'list', of: { type: 'string' } },\n    layout: { type: 'string' },\n    bibliography: { type: 'json' },\n    canonicalUrl: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    structuredData: {\n      type: 'json',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'BlogPosting',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.lastmod || doc.date,\n        description: doc.summary,\n        image: doc.images ? doc.images[0] : siteMetadata.socialBanner,\n        url: `${siteMetadata.siteUrl}/${formatSlug(\n          doc._raw.flattenedPath.replace(/^.+?(\\/)/, '')\n        )}`,\n      }),\n    },\n  },\n}))\n\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Blog, Authors],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      [remarkFootnotes, { inlineNotes: true }],\n      remarkMath,\n      remarkImgToJsx,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeKatex,\n      // @ts-ignore\n      [rehypeCitation, { path: path.join(root, 'data'), linkCitations: true }],\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\n      // @ts-ignore\n      rehypePresetMinify,\n    ],\n  },\n  onSuccess: async (importData) => {\n    const { allBlogs } = await importData()\n    createTagCount(allBlogs)\n    createSearchIndex(allBlogs)\n  },\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA,QAAMA,gBAAe;AAAA,MACnB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,aAAa;AAAA,MACb,UAAU;AAAA,MACV,SAAS;AAAA,MACT,UAAU;AAAA,MACV,OAAO;AAAA,MACP,cAAc;AAAA,MACd,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,WAAW;AAAA,QACT,iBAAiB;AAAA,UACf,mBAAmB;AAAA;AAAA,QACrB;AAAA,MACF;AAAA,MACA,YAAY;AAAA;AAAA,QAEV,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,UAAU;AAAA;AAAA,QACV,cAAc;AAAA,UACZ,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,UAIN,cAAc;AAAA,UACd,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,SAAS;AAAA;AAAA,UACT,WAAW;AAAA;AAAA;AAAA,UAEX,UAAU;AAAA;AAAA;AAAA,UAGV,OAAO;AAAA;AAAA,UAEP,WAAW;AAAA;AAAA;AAAA;AAAA,UAIX,UAAU;AAAA,QACZ;AAAA,QACA,kBAAkB;AAAA,UAChB,MAAM;AAAA;AAAA,UACN,WAAW;AAAA;AAAA,UACX,OAAO;AAAA;AAAA;AAAA;AAAA,UAGP,OAAO;AAAA;AAAA,UAEP,WAAW;AAAA,QACb;AAAA,QACA,QAAQ;AAAA;AAAA,UAEN,WAAW;AAAA,QACb;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN,UAAU;AAAA;AAAA,QACV,YAAY;AAAA,UACV,qBAAqB;AAAA;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAUA;AAAA;AAAA;;;ACnDjB,0BAAyB;AAtBzB,SAAS,oBAAoC,kBAAkB;AAC/D,SAAS,qBAAqB;AAC9B,OAAO,iBAAiB;AACxB,OAAO,mBAAmB;AAC1B,OAAO,UAAU;AAEjB,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,qBAAqB;AAC5B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,iBAAiB;AACxB,OAAO,oBAAoB;AAC3B,OAAO,qBAAqB;AAC5B,OAAO,wBAAwB;AAE/B,SAAS,gBAAgB,iBAAiB;AAE1C,IAAM,OAAO,QAAQ,IAAI;AAKzB,SAAS,WAAW,MAAM;AACxB,QAAM,QAAQ;AACd,SAAO,KAAK,QAAQ,OAAO,EAAE;AAC/B;AAEA,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,WAAW,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE,CAAC;AAAA,EAC7E;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,WAAW,IAAI,KAAK,aAAa;AAAA,EACrD;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,KAAK,EAAE,MAAM,UAAU,SAAS,CAAC,QAAQ,mBAAmB,IAAI,KAAK,GAAG,EAAE;AAC5E;AAKA,SAAS,eAAe,UAAU;AAChC,QAAM,WAAmC,CAAC;AAC1C,WAAS,QAAQ,CAAC,SAAS;AACzB,QAAI,KAAK,QAAQ,KAAK,UAAU,MAAM;AACpC,WAAK,KAAK,QAAQ,CAAC,QAAQ;AACzB,cAAM,eAAe,cAAc,KAAK,GAAG;AAC3C,YAAI,gBAAgB,UAAU;AAC5B,mBAAS,YAAY,KAAK;AAAA,QAC5B,OAAO;AACL,mBAAS,YAAY,IAAI;AAAA,QAC3B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACD,gBAAc,uBAAuB,KAAK,UAAU,QAAQ,CAAC;AAC/D;AAEA,SAAS,kBAAkB,UAAU;AACnC,MACE,oBAAAC,SAAc,QAAQ,aAAa,UACnC,oBAAAA,QAAa,OAAO,WAAW,qBAC/B;AACA;AAAA,MACE,UAAU,oBAAAA,QAAa,OAAO,WAAW,mBAAmB;AAAA,MAC5D,KAAK,UAAU,eAAe,UAAU,QAAQ,CAAC,CAAC;AAAA,IACpD;AACA,YAAQ,IAAI,iCAAiC;AAAA,EAC/C;AACF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,SAAS,CAAC,EAAE;AAAA,IAC1D,SAAS,EAAE,MAAM,OAAO;AAAA,IACxB,OAAO,EAAE,MAAM,UAAU;AAAA,IACzB,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,QAAQ,EAAE,MAAM,OAAO;AAAA,IACvB,SAAS,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAChD,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,cAAc,EAAE,MAAM,OAAO;AAAA,IAC7B,cAAc,EAAE,MAAM,SAAS;AAAA,EACjC;AAAA,EACA,gBAAgB;AAAA,IACd,GAAG;AAAA,IACH,gBAAgB;AAAA,MACd,MAAM;AAAA,MACN,SAAS,CAAC,SAAS;AAAA,QACjB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU,IAAI;AAAA,QACd,eAAe,IAAI;AAAA,QACnB,cAAc,IAAI,WAAW,IAAI;AAAA,QACjC,aAAa,IAAI;AAAA,QACjB,OAAO,IAAI,SAAS,IAAI,OAAO,CAAC,IAAI,oBAAAA,QAAa;AAAA,QACjD,KAAK,GAAG,oBAAAA,QAAa,OAAO,IAAI;AAAA,UAC9B,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,QAC/C,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,YAAY,EAAE,MAAM,SAAS;AAAA,IAC7B,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,OAAO,EAAE,MAAM,SAAS;AAAA,IACxB,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,UAAU,EAAE,MAAM,SAAS;AAAA,IAC3B,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,QAAQ,EAAE,MAAM,SAAS;AAAA,EAC3B;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,OAAO;AAAA,EAC7B,KAAK;AAAA,IACH,KAAK,QAAQ,IAAI;AAAA,IACjB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,iBAAiB,EAAE,aAAa,KAAK,CAAC;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MAEA,CAAC,gBAAgB,EAAE,MAAM,KAAK,KAAK,MAAM,MAAM,GAAG,eAAe,KAAK,CAAC;AAAA,MACvE,CAAC,iBAAiB,EAAE,iBAAiB,MAAM,eAAe,KAAK,CAAC;AAAA;AAAA,MAEhE;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW,OAAO,eAAe;AAC/B,UAAM,EAAE,SAAS,IAAI,MAAM,WAAW;AACtC,mBAAe,QAAQ;AACvB,sBAAkB,QAAQ;AAAA,EAC5B;AACF,CAAC;",
  "names": ["siteMetadata", "siteMetadata"]
}
